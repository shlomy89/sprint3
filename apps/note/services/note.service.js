import { utilService } from "../../../services/util.service.js"
import { storageService } from "../../../services/storage.service.js"

import { gNotes } from "./notes.data.js"
const { loadFromStorage, saveToStorage } = storageService
const { makeId, makeLorem, getRandomIntInclusive, randomBoolean } = utilService
export const noteService = {
  query,
  getById,
  addNote,
  removeNote,
}
// console.log(gNotes)
// Done - return to index the array of notes
// Done - save the db to local storage
// Done - make the index display the notes from the storage
// DONE - make the note form add a note to the db
// DONE - give the note delete function

// in progress - style the notes

// todo - add filter feature for now only by info.includes((filterBy)=>{...})

const KEY = "notesDB"

function query(filterBy) {
  let notes = _loadFromStorage(KEY)
  if (!notes) {
    notes = [...gNotes]
    _saveToStorage(notes)
  }
  // TODO - add search filter here you can add more functionality like sorting by date or a-z
  // if (filterBy) {
  //   let { isOnSale, title, minPrice, maxPrice } = filterBy
  //   if (isOnSale === "") isOnSale = false
  //   if (!minPrice) minPrice = 0
  //   if (!maxPrice) maxPrice = Infinity
  //   notes = notes.filter((book) => {
  //     if (isOnSale) {
  //       return (
  //         book.listPrice.amount >= minPrice &&
  //         book.listPrice.amount <= maxPrice &&
  //         book.title.includes(title) &&
  //         book.listPrice.isOnSale === isOnSale
  //       )
  //     } else {
  //       return (
  //         book.listPrice.amount >= minPrice &&
  //         book.listPrice.amount <= maxPrice &&
  //         book.title.includes(title)
  //       )
  //     }
  //   })
  // }
  return Promise.resolve(notes)
}

function getById(noteId) {
  if (!noteId) return Promise.resolve(null)
  const notes = _loadFromStorage()
  const note = notes.find((note) => noteId === note.id)
  return Promise.resolve(note)
}

// todo - create an add todo and remove todo
// todo - manage todo status update

function removeNote(noteId) {
  console.log(noteId)
  let notes = _loadFromStorage()
  // notes.map((note) => {
  //   if (note.id === noteId) {
  notes = notes.filter((note) => note.id !== noteId)
  //     console.log(todos)
  //     note.todos = todos
  _saveToStorage(notes)
  //   }
  // })
  return Promise.resolve(notes)
}

function addNote(info, type) {
  if (type === "todos") return addTodoNote(info, type)

  let vals = []
  for (const key in info) {
    console.log("getting from add note", key, type)
    vals.push(info[key])
  }
  const _isValid = (val) => val
  if (!vals.some(_isValid)) return Promise.resolve()
  console.log("info", { ...info })
  const note = { id: makeId(), type, info: { ...info } }
  let notes = _loadFromStorage()
  notes = [note, ...notes]
  _saveToStorage(notes)
  return Promise.resolve(notes)
}

function addTodoNote(info, type) {
  let vals = []
  for (const key in info) {
    console.log("getting from addTodoNote", key, type)
    vals.push(info[key])
  }
  const _isValid = (val) => val
  if (!vals.some(_isValid)) return Promise.resolve()
  let splitTodos = []
  info.todos
    .split(",")
    .map((todo) => splitTodos.push({ text: todo, doneAt: null, id: makeId() }))
  const note = {
    id: makeId(),
    type,
    info: { title: info.title, todos: splitTodos },
  }

  let notes = _loadFromStorage()
  notes = [note, ...notes]
  _saveToStorage(notes)
  return Promise.resolve(notes)
}

function _loadFromStorage() {
  return loadFromStorage(KEY)
}

function _saveToStorage(notes) {
  return saveToStorage(KEY, notes)
}

// let notesClasses = () => {
//   let classes = []
//   for (let i = 0; i < 40; i++) {
//     classes.push({ class: getRandomIntInclusive(1, 7), id: makeId() })
//   }
//   return classes
// }
// todo - create an array of 30 objects

// todo - each note has a color picker
// todo - each note has a bool isPinned
// todo - create an object randomly from this array of types [image, text , todo , iframe]
// ? text
// todo - if txt return random lorem ipsum generated by height/class
// todo - check how long the text is and give it a class accordingly ??? hieght  of every line is 24px+-
// todo - make the text appear well in the grid use dynamic text sizing vh prop?
// ? image
// todo - get images from lorem ipsum
// todo - make any image appear well in the note by giving them a class by width or hieght
// todo - image will be on the top and title will be on yhe bottom of the note
// ? iframe
// todo - all video have the same dispaly ratio more or less so make the notes of this type all be the same class just a different src
// ? todo note
// todo - if type is todo the note sould use the same functionality as an email  = done(read/unread) \ remove \ edit \ add todo
// let keeps = []
// const TYPES = ["text", "todo", "iframe", "img"]
// const NOTE_COUNT = 30
// const _createData = (count) => {
//   for (let i = 0; i < count; i++) {
//     let type =
//     console.log()
//   }
// }
